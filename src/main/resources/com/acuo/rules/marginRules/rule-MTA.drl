package com.acuo.rules.marginRules

import org.slf4j.Logger

global Logger log;

rule "rule-mta-netExposore-vm"
	when
		$callVM: MarginCall(marginType == "Variation",$dirVM:direction, $marginVM:(deliverAmount+returnAmount))
		not MarginCall(marginType == "Initial")
        $agreement: LocalAgreement(type in ("bilateral","legacy"),$MTA1: MTA1, $MTA2: MTA2)
        // if the client is the posting party, compare deliverAmount+returnAmount to MTA1
        // if the client is the collecting party, compare deliverAmount+returnAmount to MTA2
        eval(($callVM.getDirection() == "OUT" && $callVM.getDeliverAmount() + $callVM.getReturnAmount() > $MTA1) || ($callVM.getDirection() == "IN" && $callVM.getDeliverAmount() + $callVM.getReturnAmount() > $MTA2))
        $result: MarginResult();
    then
       $result.setMarginAmountVM($marginVM);
       $result.setDirectionVM($dirVM);
       update($result);
       log.info("Rule: '{}', margin result: '{}'", drools.getRule().getName(), $result );
end

rule "rule-mta-netExposore-im"
	when
		$callIM: MarginCall(marginType == "Initial",$dirIM:direction, $marginIM:(deliverAmount+returnAmount))
		not MarginCall(marginType == "Variation")
        $agreement: LocalAgreement(type in ("bilateral","legacy"),$MTA1: MTA1, $MTA2: MTA2)
        // if the client is the posting party, compare deliverAmount+returnAmount to MTA1
        // if the client is the collecting party, compare deliverAmount+returnAmount to MTA2
        eval(($callIM.getDirection() == "OUT" && $callIM.getDeliverAmount() + $callIM.getReturnAmount() > $MTA1) || ($callIM.getDirection() == "IN" && $callIM.getDeliverAmount() + $callIM.getReturnAmount() > $MTA2))
        $result: MarginResult();
	then
        $result.setMarginAmountIM($marginIM);
        $result.setDirectionIM($dirIM);
        update($result);
		log.info("Rule: '{}', margin result: '{}'", drools.getRule().getName(), $result );
end



rule "rule-mta-netExposore-vmim-sameDir"
	when
		$callVM: MarginCall(marginType == "Variation",$dirVM:direction, $marginVM:(deliverAmount+returnAmount))
		$callIM: MarginCall(marginType == "Initial",$dirIM:direction, $marginIM:(deliverAmount+returnAmount))
        $agreement: LocalAgreement(type in ("bilateral","legacy"),$MTA1: MTA1, $MTA2: MTA2)
        $result: MarginResult();
        // if the client is the posting party, compare deliverAmount+returnAmount of both IM and VM to MTA1
        // if the client is the collecting party, compare deliverAmount+returnAmount of both IM and VM to MTA2
        eval(($dirVM =="OUT" && $dirIM=="OUT" && ($marginVM+$marginIM > $MTA1))|| ($dirVM =="IN" && $dirIM=="IN" && ($marginVM+$marginIM > $MTA2)))

	then
        $result.setMarginAmountIM($marginIM);
        $result.setMarginAmountVM($marginVM);
        $result.setMarginAmountNet($marginVM+$marginIM);
        $result.setDirectionIM($dirIM);
        $result.setDirectionVM($dirVM);
        $result.setDirectionNet($dirIM);
        update($result);
        log.info("Rule: '{}', margin result: '{}'", drools.getRule().getName(), $result );
end

rule "rule-mta-netExposore-vmim-diffDir-vmLarger"
	when
		$callVM: MarginCall(marginType == "Variation",$dirVM:direction, $marginVM:(deliverAmount+returnAmount))
		$callIM: MarginCall(marginType == "Initial",$dirIM:direction,$marginIM:(deliverAmount+returnAmount))
        $agreement: LocalAgreement(type in ("bilateral","legacy"),$MTA1: MTA1, $MTA2: MTA2)
        $result: MarginResult();
        // if the client is the posting party, compare deliverAmount+returnAmount of both IM and VM to MTA1
        // if the client is the collecting party, compare deliverAmount+returnAmount of both IM and VM to MTA2
        eval(($dirVM=="OUT" && $dirIM=="IN" && ($marginVM - $marginIM > $MTA1))||($dirVM=="IN" && $dirIM=="OUT" && ($marginVM - $marginIM > $MTA2)));
	then
        $result.setMarginAmountIM($marginIM);
        $result.setMarginAmountVM($marginVM);
        $result.setMarginAmountNet($marginVM-$marginIM);
        $result.setDirectionIM($dirIM);
        $result.setDirectionVM($dirVM);
        $result.setDirectionNet($dirVM);
        update($result);
        log.info("Rule: '{}', margin result: '{}'", drools.getRule().getName(), $result );
end

rule "rule-mta-netExposore-vmim-diffDir-imLarger"
	when
		$callVM: MarginCall(marginType == "Variation",$dirVM:direction, $marginVM:(deliverAmount+returnAmount))
		$callIM: MarginCall(marginType == "Initial",$dirIM:direction,$marginIM:(deliverAmount+returnAmount))
        $agreement: LocalAgreement(type in ("bilateral","legacy"),$MTA1: MTA1, $MTA2: MTA2)
        $result: MarginResult();
        // if the client is the posting party, compare deliverAmount+returnAmount of both IM and VM to MTA1
        // if the client is the collecting party, compare deliverAmount+returnAmount of both IM and VM to MTA2
        eval(($dirVM=="IN" && $dirIM=="OUT" && ($marginIM - $marginVM > $MTA1))||($dirVM=="OUT" && $dirIM=="IN" && ($marginIM - $marginVM > $MTA2)));
    then
        $result.setMarginAmountIM($marginIM);
        $result.setMarginAmountVM($marginVM);
        $result.setMarginAmountNet($marginIM-$marginVM);
        $result.setDirectionIM($dirIM);
        $result.setDirectionVM($dirVM);
        $result.setDirectionNet($dirIM);
        update($result);
        log.info("Rule: '{}', margin result: '{}'", drools.getRule().getName(), $result );
end